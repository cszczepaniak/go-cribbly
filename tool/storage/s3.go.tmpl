package {{ .EntityLower }}s

import (
	"encoding/json"

	"github.com/cszczepaniak/go-cribbly/internal/model"
	"github.com/cszczepaniak/go-cribbly/internal/persistence/bytestore"
)

const {{ .EntityCamel }}sPrefix = `{{ .EntityCamel }}s/`

func {{ .EntityCamel }}Key(id string) string {
	return {{ .EntityCamel }}sPrefix + id + `.json`
}

type s3{{ .Entity }}Store struct {
	byteStore bytestore.ByteStore
}

var _ {{ .Entity }}Store = (*s3{{ .Entity }}Store)(nil)

func NewS3{{ .Entity }}Store(byteStore bytestore.ByteStore) *s3{{ .Entity }}Store {
	return &s3{{ .Entity }}Store{
		byteStore: byteStore,
	}
}

func (s *s3{{ .Entity }}Store) Create(e model.{{ .Entity }}) (model.{{ .Entity }}, error) {
	err := s.byteStore.PutJSON({{ .EntityCamel }}Key(e.ID), e)
	if err != nil {
		return model.{{ .Entity }}{}, err
	}

	return e, nil
}

func (s *s3{{ .Entity }}Store) Get(id string) (model.{{ .Entity }}, error) {
	var v model.{{ .Entity }}

	err := s.byteStore.GetJSON({{ .EntityCamel}}Key(id), &v)
	if err != nil {
		return model.{{ .Entity }}{}, err
	}

	return v, nil
}

func (s *s3{{ .Entity }}Store) GetAll() ([]model.{{ .Entity }}, error) {
	keyToPayload, err := s.byteStore.GetWithPrefix({{ .EntityCamel }}sPrefix)
	if err != nil {
		return nil, err
	}

	res := make([]model.{{ .Entity }}, len(keyToPayload))
	i := 0
	for _, p := range keyToPayload {
		err := json.Unmarshal(p, &res[i])
		if err != nil {
			return nil, err
		}
		i++
	}

	return res, nil
}
